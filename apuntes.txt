***Clase 1 El arte de la programaci√≥n***

El arte de la programaci√≥n: por qu√© empezar a programar
Los lenguajes de programaci√≥n est√°n por todos lados. Python un lenguaje que podemos aprender para iniciarnos en la ingenier√≠a de software. Es utilizado en Drones, Autos aut√≥nomos y hasta cohetes, nos rodea por todos lados.

Razones por iniciarse con Python

El lenguaje con mayor crecimiento
Es el curso ideal si no tienes ning√∫n contacto con la programaci√≥n o ya dominas alg√∫n lenguaje y quieres aprender m√°s.
Su forma de escribir es elegante y simple
La programaci√≥n est√° en todos lados
Programar es darle instrucciones a la computadora para que resuelva un problema.
La industria de tecnolog√≠a es una de las que tienen mayor crecimiento.
Aporte creado por: Max D√≠az, Heros

***Clase 2 ¬øPor qu√© aprender python?***
Python funciona muy bien en IOT, Inteligencia Artificial, Backend, Data Science
con Python vamos a fortalecer las buenas pr√°cticas en cu√°nto a programaci√≥n, es f√°cil de aprender y muy elegante quiere decir que necesita de una estructura bien
definidad para poder funcionar, se puede decir que la indentaci√≥n

Python es lenguaje de programaci√≥n multiparadigma, ya que soporta orientaci√≥n a objetos, programaci√≥n imperativa y, en menor medida, programaci√≥n funcional. Es un lenguaje interpretado, din√°mico y multiplataforma.

Python es muy elogiado por su elegante sintaxis y su c√≥digo legible, si est√°s comenzando tu carrera de programaci√≥n, Python se adapta a tus necesidades.

Python tienen una amplia gama de usos. Desde procesamiento de datos, al aprendizaje de m√°quina. Por ello, Python es elegido como el lenguaje de programaci√≥n de muchas empresas y organizaciones.

Campos de uso de Python:
Frontend: Se encarga de llevar el dise√±o de una aplicaci√≥n o sitio web a c√≥digo
IoT: Se encarga de darle la capacidad de conectarse a internet a elementos que pueden estar a nuestro alrededor.
IA: Se encarga de ense√±arle a la computadora a resolver un determinado problema sin la necesidad de estar involucrados constantemente.
Backend: Se encarga de crear la l√≥gica con la cual va a funcionar una determinada aplicaci√≥n y que va a ser almacenada en un servidor.
DevOps: Se encarga de manejar la informaci√≥n almacenada en la nube de una determinada aplicaci√≥n.
Data Science: Se encarga de tomar la informaci√≥n relevante de un determinado ambiente y poder sacar conclusiones al respecto.
Videojuegos: Se encarga de combinar la programaci√≥n, el dise√±o y la m√∫sica para generar grandes experiencias a los usuarios.
Desarrollo m√≥vil: Se encarga de crear aplicaciones que ser√°n almacenadas en la PlayStore o AppStore, y que podremos hacer uso de ellas desde nuestros smartphones.
Aporte creado por JulianD

***Clase 3 El nucleo de un programa: los algoritmos***

- Un algoritmo es una serie de pasos para resolver un problema
- un algoritmo debe ser finito, nunca tiene pasos indefinidos
- un algoritmo no es ambiguo, es decir, no podemos tener un paso que en una parte signifique algo y en otra parte signifique algo diferente, lo que se debe hacer es que a cada paso
tenga una finalidad

Estudiar diagramas de flujo

Dentro de todo lenguaje de programaci√≥n existe un n√∫cleo llamado algoritmo. Un algoritmo es una serie de pasos ordenados para resolver un problema. Este es finito, ordenado, y no ambiguo.

Definiciones de algoritmo
Algoritmo: Conjunto ordenado de operaciones sistem√°ticas que permite hacer un c√°lculo y hallar la soluci√≥n de un tipo de problema.
Algoritmo: Se denomina algoritmo a un grupo finito de operaciones organizadas de manera l√≥gica y ordenada que permite solucionar un determinado problema.
Algoritmo: una serie de instrucciones o reglas establecidas que, por medio de una sucesi√≥n de pasos, permiten arribar a un resultado o soluci√≥n.
Algoritmo: una secuencia de instrucciones que representan un modelo de soluci√≥n para determinado tipo de problemas. O bien como un conjunto de instrucciones que realizadas en orden conducen a obtener la soluci√≥n de un problema.
¬øC√≥mo se Dise√±a un Algoritmo?
En programaci√≥n, un algoritmo establece, de manera gen√©rica e informal, la secuencia de pasos o acciones que resuelve un determinado problema y, para representarlo, se utiliza, fundamentalmente, dos tipos de notaci√≥n: pseudoc√≥digo y diagramas de flujo.

Partes de un Algoritmo
Todo algoritmo debe obedecer a la estructura b√°sica de un sistema, es decir: entrada, proceso y salida.

Caracter√≠sticas de los Algoritmos
Las caracter√≠sticas fundamentales que debe cumplir todo algoritmo son:

Un algoritmo debe ser preciso e indicar el orden de realizaci√≥n de cada paso.
Un algoritmo debe estar definido. Si se sigue un algoritmo dos veces, se debe obtener el mismo resultado cada vez.
Un algoritmo debe ser finito. el algoritmo se debe terminar en alg√∫n momento; o sea, debe tener un n√∫mero finito de pasos.
Un algoritmo debe ser legible: El texto que lo describe debe ser claro, tal que permita entenderlo y leerlo f√°cilmente.
Aporte creado por: David Barreto, Jair Flores

recomendados de la clase:
https://platzi.com/clases/2218-pensamiento-logico/35211-tutorial-de-algoritmos-de-programacion/

***Clase 4 Instalac√≠√≥n de nuestras herramientas en windows***

Para empezar a programar con Python, necesitaremos las siguientes herramientas:

Editor de c√≥digo
Facilita la escritura del c√≥digo, ya que da ciertas ayudas o resalta palabras claves del lenguaje de programaci√≥n.

Ejemplos de editor de c√≥digo
Visual Studio Code
Sublime text
Atom
Pycharm
El que recomienda y el que se va a utilizar es Visual Studio Code, porque es el m√°s popular en la industria de tecnolog√≠a y varios desarrolladores lo utilizan.

Consola
Programa que sirve para manejar la computadora sin necesidad de emplear la interfaz gr√°fica.

Ejemplos de consola

CMD
Power Shell
Cmder.
Se utilizar√° cmder, porque tiene comandos compatibles con sistemas operativos del tipo Unix y Windows.
Lenguaje de programaci√≥n
Python, que es el lenguaje m√°s usado en el mundo y es ampliamente considerado el m√°s f√°cil de aprender.

Aporte creado por: Ana Mar√≠a √ëacato

recomendados de la clase

Welcome to Python.org
https://python.org/

Cmder | Console Emulator
https://cmder.net/

Visual Studio Code - Code Editing. Redefined
https://code.visualstudio.com/

***Clase 5 Instalaci√≥n de nuestras herramientas en Mac***

Ya conoces cu√°les son las herramientas b√°sicas que todo programador debe dominar:

La consola / terminal / l√≠nea de comandos
El editor de c√≥digo: Visual Studio Code
El lenguaje de programaci√≥n: Python

En esta lectura, te ense√±ar√© a instalar cada una de ellas en una Mac. Comencemos por la consola:

Instalaci√≥n de la consola
¬°Sorpresa! En Mac no necesitas instalar una consola a diferencia de Windows. Sin embargo, para poder usar correctamente la terminal debes seguir una serie de pasos:

Abre la carpeta Aplicaciones. Luego, ve a Utilidades y haz doble click en la aplicaci√≥n Terminal. Esto deber√≠a abrirte la consola de comandos. Si no te funcion√≥ o no encontraste la aplicaci√≥n de Terminal, puedes pulsar ‚åò + barra espaciadora para abrir Spotlight. All√≠ escribe ‚ÄúTerminal‚Äù y haz click en el primer resultado de b√∫squeda.

Ejecuta los siguientes comandos:
sudo xcode-select --install
sudo xcode-select --reset
La Terminal te pedir√° que ingreses la contrase√±a de administrador de tu computadora. H√°zlo.

Una vez que completes los dos pasos anteriores, tu terminal deber√≠a funcionar a la perfecci√≥n. Pasemos a la instalaci√≥n del editor de c√≥digo. En este curso vamos a trabajar con Visual Studio Code, as√≠ que vamos a dejarlo listo:

Instalaci√≥n del editor de c√≥digo
Abre tu navegador preferido (Safari, Chrome, el que quieras) y dir√≠gete a https://code.visualstudio.com/.

Una vez all√≠, haz click en el bot√≥n ‚ÄúDownload for Mac‚Äù o ‚ÄúDescargar para Mac‚Äù

Abre la lista de archivos descargados de tu navegador, y encuentra el instalador

Arrastra el archivo Visual Studio Code.app a la carpeta Aplicaciones

5.A√±ade el editor al dock d√°ndole click derecho al √≠cono que te aparece en pantalla y seleccionando ‚ÄúOptions‚Äù u ‚ÄúOpciones‚Äù, y luego ‚ÄúKeep in dock‚Äù o ‚ÄúMantener en el dock‚Äù

Abre tu editor, ¬°y listo!, funcionando üòâ
Excelente, solo nos queda instalar Python:

Instalaci√≥n de Python
El lenguaje de programaci√≥n es la joya de la corona de nuestras herramientas. Sin Python no puedes programar, es as√≠ de simple. Sigue los siguientes pasos:

Abre tu navegador preferido (Safari, Chrome, el que quieras) y dir√≠gete a https://www.python.org/downloads/

Da click en el bot√≥n ‚ÄúDownload Python 3.x.x‚Äù. En las ‚Äúx‚Äù vas a ver n√∫meros. Lo importante es que el primer n√∫mero sea un 3, los dos que siguen no nos interesan, porque cambian todo el tiempo.

Abre el instalador descargado, y sigue los pasos

¬°Perfecto! Ya tienes las tres herramientas funcionando en tu Mac. Acomp√°√±ame a la siguiente clase para aprender a usar la terminal üíª

***Clase 6 Instalaci√≥n de nuestras herramientas en Ubuntu***

Ya conoces cu√°les son las herramientas b√°sicas que todo programador debe dominar:

La consola / terminal / l√≠nea de comandos
El editor de c√≥digo: Visual Studio Code
El lenguaje de programaci√≥n: Python
En esta lectura te ense√±ar√© a instalar cada una de ellas en una computadora con Ubuntu como sistema operativo. Si tienes otra distribuci√≥n de Linux, muy probablemente los pasos var√≠en ligeramente. Pero tambi√©n, es igualmente probable que ya sepas hacer todo esto sin este tutorial, porque como usuario de Linux generalmente tienes un conocimiento m√°s avanzado sobre c√≥mo funciona el sistema operativo. Sin m√°s pre√°mbulo, comencemos por la consola:

Instalaci√≥n de la consola
¬°Sorpresa! En Ubuntu no necesitas instalar una consola a diferencia de Windows. Para poder usar la terminal debes presionar Ctrl + Alt + t y voil√†, se abrir√° frente a tus ojos


Pasemos a la instalaci√≥n del editor de c√≥digo. En este curso vamos a trabajar con Visual Studio Code, as√≠ que vamos a dejarlo listo:

Instalaci√≥n del editor de c√≥digo
Abre tu navegador preferido (Firefox, Chrome, el que quieras) y dir√≠gete a https://go.microsoft.com/fwlink/?LinkID=760868

Abre el archivo descargado. Notar√°s que termina en ‚Äú.deb‚Äù

Sigue los pasos de instalaci√≥n

Introduce la contrase√±a de tu sistema:

Espera a que termine la instalaci√≥n:

Instalaci√≥n finalizada:

Abre tu editor, ¬°y listo!, funcionando üòâ

Excelente, solo nos queda instalar Python:

Instalaci√≥n de Python
El lenguaje de programaci√≥n es la joya de la corona de nuestras herramientas. Sin Python no puedes programar, es as√≠ de simple. Sigue los siguientes pasos:

Abre tu terminal y ejecuta los siguientes comandos:
sudo apt update

sudo apt install python3-pip

Te mostrar√° si deseas continuar con la instalaci√≥n, da click en enter.

La instalaci√≥n empezar√°:

Ejecuta el comando python3 -V para verificar que el lenguaje de programaci√≥n se instal√≥ correctamente

Si el resultado se parece al que puedes ver en la captura de pantalla, quiere decir que todo sali√≥ bien y podemos seguir üí™üèº

Ya tienes las tres herramientas funcionando en tu computadora. Acomp√°√±ame a la siguiente clase para aprender a usar la terminal üíª

***Clase 7 Tu mejor herramienta: la consola***

No necesitamos la interfaz gr√°fica de nuestra computadora para poder usarla. Para esto, nuestra mejor herramienta es la consola. La consola nos permite comunicarnos con el computador por medio de comandos y as√≠ realizar tareas sin la necesidad de utilizar el mouse en una interfaz, sino solamente a trav√©s del c√≥digo.

Comandos b√°sicos para usar en la consola:
Ctrl + L = Limpiar pantalla
CD = Change Directory
‚Ä¶ = Carpeta padre
CD‚Ä¶ = Cambiar de directorio a la carpeta padre
Alt + 92 = \
ls = list
mkdir = Make directory -> crear carpeta
touch = para crear archivos
Aporte creado por: Edgar Roquel

recomendados de la clase

Curso de Introducci√≥n a la Terminal y L√≠nea de comandos
https://platzi.com/clases/terminal/

***Clase 8 Explorando Python: operadores aritm√©ticos***

Primero, para iniciar la consola interactiva de Python debemos escribir el comando **py **en Windows, pero en otros sistemas el comando es python3.
Ahora, podemos comenzar.

En la consola nos permite escribir operaciones matem√°ticas como 5 + 5 sin escribir nada m√°s, pero en el editor de c√≥digo debemos ‚Äúimprimir‚Äù el resultado, de la siguiente manera:

print(5 + 5). Con esto obtendremos el resultado.

Ahora veamos como se realiza cada operaci√≥n aritm√©tica:

Operadores aritm√©ticos en Python
Suma: 5 + 5
Resta: 5 - 5
Multiplicaci√≥n: 5 * 5
Divisi√≥n (con decimales): 5 / 5
Divisi√≥n (sin decimales): 21 // 5
Resto de la divisi√≥n: 21 % 5
Potencia: 2 ** 2
Ra√≠z cuadrada:
math.sqrt(9)     
 3.0
math.sqrt(11.11)   
 3.3331666624997918
math.sqrt(Decimal('6.25'))     
 2.5
Python respeta la separaci√≥n de t√©rminos, por lo que si escribimos 5 + 5 * 2 multiplicar√° primero 5 x 2. En el caso de que quisi√©ramos que primero sume 5 + 5 ponemos par√©ntesis:
(5 + 5) * 2.

Para recordar el orden de las operaciones en √°lgebra y en Python, es recomendable utilizar el orden PEMDAS:

Par√©ntesis
Exponentes o ra√≠ces
Multiplicaciones
Divisiones
Adiciones y sustracciones
Aporte creado por: Ignacio Crespo.

recomendados de la clase

Python Keywords
https://www.w3schools.com/python/python_ref_keywords.asp

***Clase 9 ¬øQu√© es una variable?***

Una variable es un lugar en memoria (una especie de caja) en el que podemos guardar objetos (n√∫meros, texto, etc). Esta variable posee un identificador o nombre con el cual podemos llamarla m√°s tarde cuando la necesitemos.

Asignaci√≥n de variables
En Python, creamos las variables asign√°ndoles un valor de la siguiente manera:
<identificador> = <valor>
en este caso el signo = se lee como ‚Äúasignar‚Äù

Reasignaci√≥n de variables
Podemos en cualquier momento cambiar el valor de nuestra variable volviendo a asignar un valor al mismo identificador:
<identificador> = <nuevo_valor>

Reglas en el uso de identificadores de variable
No pueden empezar con un n√∫mero.
Deben estar en min√∫sculas
Para separar las palabras usamos el guion bajo: _
Estas reglas son aplicadas al lenguaje Python, en otros lenguajes puede haber otras reglas.
Tipos de variables en Python
a = 28 ‚Üí int (entero)
b = 1.5 ‚Üí float (decimales)
c = ‚ÄúHello‚Äù ‚Üí str (string o cadena de texto)
d = True ‚Üí boolean (verdadero o falso)
e = None ‚Üí NoneType (Sin valor)
f = ‚Äú5‚Äù ‚Üí str (5 y ‚Äú5‚Äù no son lo mismo. La primera es un entero y la segunda una cadena de texto)

Aporte creado por: Josue Valdivia, Fernando Molano

Lecturas recomendadas

Curso de Fundamentos de Matem√°ticas

https://platzi.com/clases/fundamentos-matematicas/

***Clase 10 Los primitivos: tipos de datos sencillos****

Un objeto es una forma de modelar el mundo en programaci√≥n. En los lenguajes de programaci√≥n se caracterizan por tener m√©todos y atributos. En Python todo es un objeto.

Podemos encontrar cuatro tipos de datos que vienen definidos por defecto en Python, a estos tipos de datos los conocemos como primitivos.

Tipos de datos primitivos en Python
Integers: n√∫meros Enteros
Floats: n√∫meros de punto flotante (decimales)
Strings: cadena de caracteres (texto)
Boolean: boolenaos (Verdadero o Falso)
Algunos operadores aritm√©ticos pueden funcionar para operar con otros tipos de datos. Por ejemplo: podemos sumar strings, lo que concatena el texto o multiplicar un entero por un string, lo que repetir√° el _string _las veces que indique el entero.

Tipos de dato adicionales
Datos en texto: str
Datos num√©ricos: int, float, complex
Datos en secuencia: list, tuple, range
Datos de mapeo: dict
Set Types: set, frozenset
Datos booleanos: bool
Datos binarios: bytes, bytearray, memoryview
¬øC√≥mo saber el tipo de dato que estoy usando?
Usamos el comando type()

Ejemplo:
x = 5
print(type(x))
Aporte creado por: Josue Valdivia, Facundo Molano

recomendados de la clase

Curso de POO y Algoritmos con Python
https://platzi.com/clases/poo-python/

Tipos de datos primitivos

Curso B√°sico de Programaci√≥n en Go
https://platzi.com/clases/2232-programacion-golang/35738-tipos-de-datos-primitivos/

***Clase 11 Convertir un dato a un tipo diferente***

C√≥mo convertir un tipo de dato a otro en Python:

Sintaxis Descripci√≥n

int(var) variable a entero
float(var) variable a flotante
str(var) variable a texto
bool(var)variable a booleano
abs(var) variable a valor absoluto
Ejemplo de conversi√≥n de datos en Python
>>> number1 = input("Escribe un n√∫mero: ")
Escribe un n√∫mero: 4
>>> number2 = input("Escribe otro n√∫mero: ")
Escribe un n√∫mero: 5
>>> numero1 + numero 2
=> '45' <== Se concatenan
Soluci√≥n:

>>> number1 = int(input("Escribe un numero: "))
Escribe un numero: 100
>>> number2 = int(input("Escribe otro numero: "))
Escribe otro numero: 300
>>> number1 + number2
=> 400
Ejemplo 2:
>>> numero1 = 4.5
int(numero1)
=> 4 <== Trunca el flotante
Ejemplo 3:
>>> numero1 = 4.5
str(numero1)
=> '4.5' <== Lo convierte a texto
Aporte creado por: Mauricio Garc√≠a

***Clase 12 Operadores l√≥gicos y de comparaci√≥n en Python***

estos son los operadores l√≥gicos
- and -> siempre me va devolver verdadero cuando todas las variables comparadas contengan el valor de verdadero
- or -> va a devolver falso cuando el contenido de todas las variables que estamos comparando con ese operador es falso
- not -> lo que hace es invertir el valor de una variable

estos son los operadores de comparaci√≥n
- == -> quiere decir que es igual qu√©
- != -> este quiere decir distinto de
- > -> mayor qu√©
- < -> menor qu√©
- >= -> mayor o igual qu√©
- <= -> menor o igual qu√©

Conoce los operadores l√≥gicos que tiene Python y c√≥mo utilizarlos de manera adecuada:

Operadores l√≥gicos
and ( y ): compara dos valores, y si ambos son verdaderos, devuelve True.
or ( √≥ ): si al comparar dos valores y uno de los dos se cumple, devuelve True. Solo devuelve falso cuando los dos valores no se cumplen.
not ( no): invierte el valor de una variable, dando el valor contrario al de la variable evaluada.
Operadores de comparaci√≥n
== ( igual qu√© ): determina si dos valores son iguales o no.
!= (diferente de): determina si dos valores son distintos o no. Si los valores son diferentes devuelve True, si son iguales devuelve False.
> (mayor que): compara dos valores, y determina si es mayor que el otro.
< (menor que): compara dos valores y determina si es menor que el otro.
>= (mayor o igual): compara dos valores y determinas si es mayor o igual que el otro.
<= (menor o igual): compara dos valores y determinas si es menor o igual que el otro.
Aporte creado por: Gabriel Quiroz

Lecturas recomendadas

Curso de Pensamiento L√≥gico

https://platzi.com/clases/pensamiento-logico/

recomendados de la clase:
Operadores l√≥gicos y de comparaci√≥n
https://platzi.com/clases/2232-programacion-golang/35743-operadores-logicos-y-de-comparacion/

Operadores L√≥gicos y Expresiones booleanas
https://platzi.com/clases/1631-java-basico/21191-operadores-logicos-y-expresiones-booleanas/

***Clase 13 Tu primer programa: conversor de monedas***

Con el siguiente c√≥digo, podremos realizar un conversor de distintas monedas en Python (pesos colombianos a d√≥lar, euro, la criptomoneda Cake y Bitcoin).

#Input del usuario
pesoscol = input("¬øCuantos pesos colombianos tienes ?")
pesoscol = float(pesoscol)
#Declaracion de valores
valor_dolar = 3679
valor_euro = 4383
valor_cake = 58800
valor_btc = 136134100
#Calculo valor dolar
dolares= pesoscol / valor_dolar
dolares = round(dolares, 2)
dolares = str(dolares)
#Calculo Valor Euro
euros= pesoscol / valor_euro
euros = round(euros, 2)
euros = str(euros)
#Calculo Cantidad de CAKE
cakes = pesoscol / valor_cake
cakes = round(cakes, 4)
cakes = str(cakes)
#Calculo Bitcoin
btcs = pesoscol / valor_btc
btcs = round(btcs, 9)
btcs = str(btcs)
#Prints
print("Tienes $"+ dolares + " dolares")
print("Tienes $"+ euros + " Euros")
print("Tienes: " + cakes + " CAKE")
print("Tienes: " + btcs + " Bitcoins")
Aporte creado por: Carlos Otalora

***Clase 14 Construyendo el camino de un programa con condicionales***

- Como buen apunte cuando por ejemplo estoy escribiendo un condicional y en el momento no s√© lo que voy a escribir luego de ese condicional y no perder tiempo ah√≠
lo que puedo hacer es colocar un pass, por ejemplo as√≠:

if edad > 17:
    pass
else:
    pass

con eso continuo escribiendo y no me detengo ah√≠

para comentar muchas l√≠neas simultaneamente con visual es as√≠: selecciona todo el bloque que tienes que comentar y
presiono 
1. ctrl + k (Vscode queda a la espera). 
2. luego pulso ctrl + c para comentar 
3. y ctrl + u para descomentar

Los condicionales son decisiones que se establecen desacuerdo a los par√°metros que indiquemos, para obtener un tipo de resultado deseado.

Ejemplo: si un n√∫mero es mayor o igual que otro, los n√∫meros deber√°n sumarse, de lo contrario deber√°n restarse. Debe cumplirse una condici√≥n para saber cu√°l ser√° el camino a seguir.

A continuaci√≥n veremos c√≥mo funcionan los condicionales en Python.

if
(Si) se usa para la condici√≥n principal.

elif
(Si no) en caso de que la condici√≥n principal o anterior no se cumpla, se puede utilizar para agregar otra condici√≥n.

else
(Sino) en caso de que la(s) condici√≥n(es) anterior(es) no se cumplan, se ejecuta como alternativa sin condicional.

En lenguaje natural (espa√±ol)
‚ÄòSi‚Äô introduce una oraci√≥n en la que se indica una condici√≥n real o hipot√©tica que se ha de cumplir necesariamente para que sea cierto o se produzca lo que se expresa: Si corres, lo alcanzar√°s.

‚ÄòSino‚Äô es una conjunci√≥n adversativa que se escribe en una sola palabra y se usa, principalmente, para contraponer un concepto a otro: No estudia, sino que trabaja.

‚ÄòSi no‚Äô** introduce una oraci√≥n condicional: Si no estudias, no aprobar√°s.

Ejemplo de condicionales en Python
nacionalidad = input("¬øEres peruano? (Responde s√≠ o no) ")
if nacionalidad == "s√≠":
    cambio_a_soles = 3.9865
    dolares = str(round(float(input("¬øCu√°ntos soles tienes? "))/cambio_a_soles, 2))
    print("Entonces tienes " + dolares + " d√≥lares.")
elif nacionalidad == "no":
    cambio_a_dolares = 0.25298
    soles = str(round(float(input("Bienvenido a Per√∫. ¬øCu√°ntos d√≥lares tienes? "))/cambio_a_dolares, 2))
    print("Entonces tienes " + soles + " soles.")
else:
    print("Escribe s√≥lo s√≠ o no, por favor. ")

***Clase 15 Varios pa√≠ses en mi conversor de monedas***

Un detalle muy importante en cualquier lenguaje de programaci√≥n es conocer las diferencias entre los condicionales. En Python en particular, es crucial mencionar la diferencia entre if, elif y else.

Diferencias entre if, else y elif
if:
if se encarga de iniciar el condicional y solicitar un requisito para ejecutar todo el c√≥digo por debajo, que conocemos como bloque de c√≥digo.

else:
Si se desea ejecutar otro c√≥digo en caso de que no se cumpla el if. Por ejemplo: el usuario no elige la opci√≥n 1, entonces (else)‚Ä¶

elif:
Se utiliza cuando utilizamos m√∫ltiples condiciones, lo que en el c√≥digo de esta clase son la opci√≥n 2 y 3. En esta clase, ten√≠amos la opci√≥n 1, pero debemos tambi√©n evaluar qu√© pasa si el usuario elige la opci√≥n 2 o 3, por lo que decimos ‚Äúque estamos evaluando m√∫ltiples condiciones‚Äù.

A√±adir comentarios en Python
Para realizar un comentario (de una sola l√≠nea), empleamos el ‚Äú#‚Äù. Un comentario es simplemente texto, el cual no es ejecutado y no afecta en absoluto en el c√≥digo. Se utiliza para explicar las l√≠neas de c√≥digo que hemos creado y hacerlas m√°s f√°ciles de entender.

Para qu√© veas c√≥mo se utilizan los condicionales y comentarios, mira este ejemplo:

#convierte pesos mexicanos, argentinos y colombianos a d√≥lares

# """ """ permite crear strings multilineas
menu = """
Bienvenido al conversor de monedas multipais

1-Pesos Mexicanos
2-Pesos Colombianos
3-Pesos Argentinos

Elige una opci√≥n: 

"""
# de derecha a izquierda: llamo a la funcion input, le paso la variable menu para que la imprima y reciba el n√∫mero que el usuario escogi√≥, lo convierto a int y lo guardo en la variable 'opcion'
opcion = int(input(menu))

if opcion == 1: #pesos mexicanos
	#pregunto al usuario la cantidad a convertir
	pesos = input('¬øCu√°ntos pesos mexicanos tienes?: ')
	#convierto a float para mejor manejo de datos
	pesos = float(pesos)
	#escribo el valor del dolar en pesos mexicanos
	tipo_de_cambio = 21.5
elif opcion == 2: #pesos colombianos
	#pregunto al usuario la cantidad a convertir
	pesos = input('¬øCu√°ntos pesos colombianos tienes?: ')
	#convierto a float para mejor manejo de datos
	pesos = float(pesos)
	#escribo el valor del dolar en pesos colombianos
	tipo_de_cambio = 3715.01
elif opcion == 3: #pesos argentinos
	#pregunto al usuario la cantidad a convertir
	pesos = input('¬øCu√°ntos pesos argentinos tienes?: ')
	#convierto a float para mejor manejo de datos
	pesos = float(pesos)
	#escribo el valor del dolar en pesos argentinos
	tipo_de_cambio = 74.44
else:  #el usuario escribi√≥ algo diferente
	print('Escribe una opci√≥n correcta: ')


#hago la conversi√≥n
dolares = pesos / tipo_de_cambio
#redondeo los d√≥lares a dos decimales
dolares = round(dolares, 2)
#convierto el float de dolares a un string
dolares = str(dolares)

#imprimo el valor de la conversion. Se pueden sumar (concatenar) strings con '+'
print('Tienes $' + dolares +' d√≥lares')
Atajo para emojis:
Windows: windows + .
Mac: ctrl + command + space
Linux: hay que descargar una aplicaci√≥n de tercero (e.g EmojiOne Picker)

Contribuci√≥n creada por: Ignacio Crespo, korpi

***Clase 16 Aprendiendo a no repetir c√≥digo con funciones***

Las funciones ayudan a optimizar el c√≥digo. Es decir, utilizar la menor cantidad de l√≠neas dentro del c√≥digo y evitar escribir acciones repetitivas.

Esto nos sirve para entregar un c√≥digo m√°s limpio y con buenas pr√°cticas, que no desperdicia recursos innecesariamente. En Python, para definir funciones empleamos def.

Gracias a def, podemos ‚Äúdefinir‚Äù funciones que emplearemos m√°s tarde. Una funci√≥n, en programaci√≥n, es un grupo de instrucciones con un objetivo en particular y que se ejecuta cuando es ‚Äúinvocada‚Äù.

Cuando la definimos, estamos d√°ndole un conjunto de instrucciones o un algoritmo. Al ahorrar l√≠neas de c√≥digo con funciones logramos tambi√©n que la legibilidad de este sea m√°s f√°cil.

C√≥mo usar def en Python
def nombredelafuncion():
    # instrucciones de la funci√≥n
Ejemplo de funciones con def en Python
def conversacion(opcion):
    print('Hola')
    print('C√≥mo est√°s')
    print('Elegiste la opcion: ' + str(opcion))
    print('Adi√≥s')

opcion = int(input('Ingrese una opci√≥n (1, 2, 3): '))

if opcion == 1:
    conversacion(opcion)

elif opcion == 2:
    conversacion(opcion)

elif opcion == 3:
    conversacion(opcion)

else:
    print('Escribe una opci√≥n correcta.')
Ignacio Crespo, Willy Corzo, √Ångel Vi√±amagua

***Clase 17 Modularizando nuestro conversor de monedas***

Para el siguiente ejemplo, crearemos el c√≥digo para un conversor de monedas.

En la primera parte se define la funci√≥n que resumir√° muchos procesos del programa. Usando def, se agrega la funci√≥n ‚Äúconversor‚Äù con los par√°metros que var√≠an dependiendo de las respuestas, que son: tipo de pesos y valor del d√≥lar. Es decir, dentro del programa se definir√° el valor de cada par√°metro.

def conversor(tipo_pesos, valor_dolar):
En la variable pesos se plantea que el usuario introduzca con input la cantidad de pesos que tiene, encontrando el primer par√°metro, que es el tipo de pesos, que se establece m√°s adelante por fuera de la funci√≥n, ya que es un protocolo.

pesos = input("¬øCu√°ntos pesos " + tipo_pesos + " tienes?: ")
Ese dato ingresado en la variable pesos se convierte de un string a un n√∫mero con float.

pesos = float(pesos)
‚Ä¢ En este punto, la variable d√≥lares aparece para definir cu√°nto cuesta, con base en los pesos ingresados anteriormente y el valor d√≥lar que se definir√° m√°s tarde por fuera de la funci√≥n, ya que es un protocolo.

dolares = pesos / valor_dolar
El valor, que probablemente sea decimal, se reduce con el atributo round dependiento de la variable dolares a solo 2 decimales.

dolares = round(dolares, 2)
Debido a que los d√≥lares son obtenidos como n√∫meros, se traducen a strings por medio del operador str
dolares = str(dolares)
Una vez obtenido el valor de los dolares en string, se imprime el resultado entre cadenas de texto.
print (‚ÄúTienes $ " + dolares + " dolares‚Äù)
‚Ä¢ Luego de establecer la funci√≥n, se crea la variable menu que no se imprime y contiene texto de referencia.

menu = ‚Äú‚Äù‚Äú
Tienes dinero üí≤
Nosotros la convertimos üí∞
1 - cop
2 - eur
3 - arg
Elige una opci√≥n: ‚Äú‚Äù‚Äù
‚Ä¢ Ya definida la variable menu, se crea la variable opci√≥n que depender√° de lo ingresado en input por el usuario en relaci√≥n con la variable menu. Es decir, que se imprime menu y se deja el espacio para obtener un dato digitado por el usuario, que luego es traducido en n√∫mero usando int.

opci√≥n = int(input(menu))
‚Ä¢ Dependiendo de lo que este usuario ingrese en el input de la variable opci√≥n: Usando if, si es igual a 1, entonces se ejecuta la funci√≥n anterior de conversor. Dentro de esta se establece el protocolo de tipo de peso para este caso y en relaci√≥n con menu que es Colombianos. El protocolo de valor del d√≥lar se define con base en el tipo de peso

if opci√≥n == 1:
conversor(‚Äúcolombianos‚Äù, 3875)
Empleando elif, si se selecciona otra opci√≥n de la variable menu ingresado en el input de opci√≥n, se ajusta el protocolo en funci√≥n a lo mostrado en menu.

elif opci√≥n == 2:
conversor(‚Äúeuros‚Äù, 0.8)
elif opci√≥n == 3:
conversor(‚Äúargentinos‚Äù, 65)
Si no se ingresa ning√∫n dato relacionado dentro de las 3 opci√≥n de menu, se imprime que ingrese una opci√≥n correcta.

else:
print(‚Äúingresa una opci√≥n correcta‚Äù)
Contribuci√≥n creada por: Daniel Iba√±ez, Diego Camacho

***Clase 18 Trabajando con texto: cadenas de caracteres***

Para trabajar con cadenas de texto en Python, vamos a aplicar una serie de m√©todos a las variables que hayamos creado anteriormente.
M√©todo: es una funci√≥n especial, que existe para un tipo de dato en particular. Por ejemplo, si queremos que el texto ingresado se transforme en may√∫sculas.

M√©todos para trabajar con texto en Python
variable.strip(): El m√©todo strip eliminar√° todos los caracteres vac√≠os que pueda contener la variable

variable.lower(): El m√©todo lower convertir√° a las letras en min√∫sculas.

variable.upper(): El m√©todo upper convertir√° a las letras en may√∫sculas.

variable.capitalize(): El m√©todo capitalize convertir√° a la primera letra de la cadena de caracteres en may√∫scula.

variable.replace (‚Äòo‚Äô, ‚Äòa‚Äô): El m√©todo replace remplazar√° un caracterer por otro. En este caso remplazar√° todas las ‚Äòo‚Äô por el caracter ‚Äòa‚Äô.

len(variable): Te indica la longitud de la cadena de texto dentro de la variable en ese momento.

√çndices:
Se escriben entre corchetes al lado de la variable y son apuntadores num√©ricos a cada caracter. Por ejemplo, para el nombre Facundo, cuando utilizamos la variable nombre[1], aparece la letra ‚Äòa‚Äô, dado que dicha variable tiene almacenada en ese momento la cadena de caracteres ‚ÄòFacundo‚Äô donde la ‚Äòa‚Äô es el segundo caracterer.

Aclaraci√≥n: se comienza a contar caracteres desde el 0 (que es el primer n√∫mero en inform√°tica). Siguiendo el ejemplo, la letra ‚ÄòF‚Äô de ‚ÄòFacundo‚Äô es el caracter n√∫mero 0. Por ende, nombre[0], nos devolver√≠a una F.

Aporte creado por: Bruno Moschetto,

***Clase 19 Trabajando con texto: slices***

En Python, los slices, traducidos al espa√±ol como ‚Äúrebanadas‚Äù, nos permiten dividir los caracteres de un string de m√∫ltiples formas. A continuaci√≥n, realizaremos un ejemplo c√≥mo utilizarlos:

C√≥mo usar slices en Python
nombre = "Francisco"
nombre
"Francisco"
nombre[0 : 3)
Arranca desde el primer √≠ndice hasta llegar antes del 3¬∞ √≠ndice.
El resultado ser√≠a
"Fra"

nombre[:3]
Va desde el principio hasta antes de llegar del 3¬∞ √≠ndice. Como no hay ning√∫n par√°metro en el primer lugar, se interpreta que arranca desde el principio. Recordemos que empezamos a contar desde cero como primer d√≠gito.
El resultado ser√≠a
"Fra"

nombre[1:7]
Arranca desde el √≠ndice 1 hasta llegar antes del 7.
El resultado ser√≠a
"rancis"

nombre[1:7:2]
Arranca desde el √≠ndice 1 hasta llegar antes del 7, pero pasos de 2 en 2, ya que eso es lo que nos indica el 3er par√°metro, el cual es 2.
El resultado ser√≠a
"rni"

nombre[1::3]
Arranca desde el √≠ndice 1 hasta el final del string (al no haber ning√∫n 2¬∞ par√°metro, significa que va hasta el final), pero en pasos de 3 en 3.
El resultado ser√≠a
"rcc"

nombre[::-1]
Al no haber par√°metro en las 2 primeras posiciones, se interpreta que se arranca desde el inicio hasta el final, pero en pasos de 1 en 1 con la palabra al rev√©s, porque es -1.
El resultado ser√≠a
"ocsicnarF"

Aporte creado por: Ignacio Crespo, Diego Camacho

***Clase 20 Proyecto: pal√≠ndromo***

En este ejemplo, aprenderemos a detectar si una palabra es pal√≠ndromo en Python. Para el ejemplo utilizaremos ‚ÄúLuz azul‚Äù.

Vamos a definir la funci√≥n utilizando def:

def esPalindromo(palabra):
	palabra = str(palabra).strip().lower()
	palabra and print(palabra == palabra[::-1])
esPalindromo(luzazul) # va a imprimir True.
¬øQu√© acaba de ocurrir?

En la primera l√≠nea de la funci√≥n, convertimos el valor recibido a string, eliminamos los espacios indeseados aplicando strip y formateamos a min√∫scula con lower.

¬øPor qu√©? Porque si ejecutamos esPalindromo(True) nuestro programa mostrar√≠a un error, ya que no se pueden ejecutar m√©todos strip y lower sobre datos de tipo booleano.

En la segunda l√≠nea, ejecutando palabra and, lo que le decimos al programa es que si la variable palabra es Truty, ejecute el c√≥digo despu√©s del and.

Esta es una forma mucho m√°s corta de correr el siguiente c√≥digo:

if palabra == True:
	ejecutar.....
Pero, ¬øqu√© es un valor truty?
En programaci√≥n, un valor truty es cualquier valor que, sin ser expl√≠citamente un booleano True, la computadora lo interpreta como un true. Por ejemplo: cualquier n√∫mero mayor a 0 o cualquier string que no este vac√≠o.

Luego, dentro del print() no es necesario hacer un if que retorne true o false, al hacer la comparaci√≥n.

# if palabra == palabra[::-1]:
#	return True
# else:
#	return False

palabra == palabra[::-1]
Si la comparaci√≥n es correcta, va a imprimir True, de lo contrario devolvera False.

Aporte creado por: Alejandro Barrios

***Clase 21 Aprendiendo bucles***

Un bucle es un ciclo continuo en todos los lenguajes de programaci√≥n que nos permite iterar sobre nuestros pasos: magina un contador c√≠clico (1,2,3,4,5,6‚Ä¶) donde puedes agregar un paso m√°s sobre tu programa principal.

Ejemplo de bucle en Python
Para este ejemplo, utilizaremos las potencias hasta llegar a un n√∫mero determinado:

def potencia(numero):
    
    potencia = 1

    while (potencia <= 10):
        
        result = numero ** potencia
        print('Potencia de {} elevado a la {} es {}'.format(numero, potencia, result))
        potencia += 1
        

def run():
    numero = int(input('Escribe el numero al cual quieres averiguarle la potencia: '))
    potencia(numero)


if __name__ == "__main__":
    run()
Ejemplo de bucle en la vida real
Despertar
Estudiar en Platzi
Comer
Dormir
Cuando repetimos estas acciones en ese orden, durante un tiempo determinado o infinito estamos hablando de un bucle.

Aporte creado por: Sandra Rojas, Rusbel Berm√∫dez

***Clase 22 El ciclo while***
Un bucle while permite repetir la ejecuci√≥n de un grupo de instrucciones mientras se cumpla una condici√≥n (es decir, mientras la condici√≥n tenga el valor True).

La sintaxis del bucle while es la siguiente:

while condicion:
    cuerpo del bucle
Python eval√∫a la condici√≥n:

Si el resultado es True, se ejecuta el cuerpo del bucle. Una vez ejecutado el cuerpo del bucle, se repite el proceso (se eval√∫a de nuevo la condici√≥n y, si es cierta, se ejecuta de nuevo el cuerpo del bucle) una y otra vez mientras la condici√≥n sea cierta.
Si el resultado es False, el cuerpo del bucle no se ejecuta y contin√∫a la ejecuci√≥n del resto del programa.
Ejemplo de while en Python
def run():
    LIMITE = 1000000
    contador = 0
    potencia_2 = 2**contador
    while potencia_2 < LIMITE:
        print('2 elevado a ' + str(contador) +
              ' es igual a: ' + str(potencia_2))
        contador = contador + 1
        potencia_2 = 2**contador

if __name__ == "__main__":
    run()
Consejo: se puede cancelar un ciclo infinito si presionas Ctrl + c.

Aporte creado por: Karla Agraz, Rusbel Berm√∫dez

***Clase 23 Explorando un bucle diferente: el ciclo for***

***Clase 24 Recorriendo un string con for***

***Clase 25 Interrumpiendo ciclos con break y continue***

***Clase 26 Proyecto: prueba de primalidad***

***Clase 27 Proyecto: videojuego***

***Clase 28 Almacenar varios valores en una variable: listas***

***Clase 29 Entendiendo c√≥mo funcionan las tuplas***

***Clase 30 ¬øQu√© son los diccionarios?***

***Clase 31 Proyecto: generador de contrase√±as***

***Clase 31 Sigue aprendiendo***